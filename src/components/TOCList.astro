---

/**
 * Adapted from the cpu.land blog, by kognise & Hack Club
 * Source: /https://github.com/hackclub/putting-the-you-in-cpu/blob/main/src/components/TOCList.astro 
 */
interface Heading {
  depth: number, 
  slug: string, 
  text: string
}

interface HeadingWithChildren extends Heading {
  children: Heading[]
}

interface Props {
  headings: Heading[]
};

const topLayer: HeadingWithChildren[] = [];
let depth = 6;

/**
 * this code converts an _un-nested_ list to a _nested_ one.
 * 
 * for example, going from 
 *   [{1}, {2}, {3}, {2}, {2}, {1}]
 * 
 * to
 *   [{1, [{2, {3}}, {2}, {2}]}, {1}] 
 * 
 * (where [...] contains the children of the node, you get the idea).
 * 
 * the key idea is to do it recursively: we only ever push children deep one
 * level at a time in the loop.
 * 
 * then, we use <Astro.self> to create a sub-TOC list from the children.
 * neat, huh? (that's from Lexi's code!!)
 */
for (const heading of Astro.props.headings) {
  if (topLayer.length === 0 || heading.depth <= depth) {
    depth = heading.depth
    topLayer.push({ ...heading, children: [] })
  } else if (heading.depth > depth) {
    topLayer.at(-1)!.children.push(heading)
  }
}

console.log(topLayer)

---

<ul>
  {topLayer.map(heading => (
    <li>
      <a href={`#${heading.slug}`} data-scrollspy={heading.slug}>
        {heading.text}
      </a>
      {heading.children.length > 0 && <Astro.self headings={heading.children} />}
    </li>
  ))}
</ul>
